{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>In this lesson, we'll explore:</p> <ul> <li> <p>What containers are and how they differ from virtual machines.</p> </li> <li> <p>How to install Docker and run a pre-built container.</p> </li> <li> <p>How to describe, build, and run a container that includes SSH.</p> </li> </ul> <p>The goal of this tutorial is to get a local container running that the user can SSH into, so that they can run this SSH tutorial even without cluster credentials.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>If you are new to programming, it's recommended that you first take a few minutes to go over this short lesson talking about how to read technical documentation.</p> <p>You'll also need a basic understanding of the Unix shell.  If you're unfamiliar with the Unix shell, review the Unix Shell tutorial by Software Carpentry. </p>"},{"location":"#why-containers","title":"Why Containers?","text":"<p>Docker is a tool which allows users to build, share, package, verify, and run applications in isolated environments called containers while avoiding the tedium of environment configuration and management.</p> <p>It's not uncommon when programming collaboratively that something that works well on one user's environment will run into issues when another user tries to run the same steps. Docker solves this problem by having dependencies and environment settings bundled together in a portable format. Whether you're developing from your personal laptop, running code on a high performance computing cluster, or deploying to production servers, Docker helps to ensure that the environment stays consistent.</p> <p>Containers are lightweight and fast, built to share the host's operating system's kernel rather than running full virtual machines. This makes them ideal for testing software in clean environments.</p> <p>By the end of this lesson, you should have a working understanding of how to use an existing Docker file to run a service with SSH. If you want to continue to learn more about Docker after this lesson here are some additional resources:</p> <ul> <li> <p>The Carpentries Community Lessons. Use the search box at the bottom to search \"containers\" to find more relevant lessons.</p> </li> <li> <p>The HSF Training Center. Articles of interest to you may be the ones for Docker, Singularity, and Reproducible Analysis with REANA.</p> </li> <li> <p>How Containers Work! by Julia Evans. If you really want to understand how containers work, this is the best resource available.</p> </li> </ul> <p>Let's continue to the next section to begin learning about container images and containers.</p>"},{"location":"01_installation/","title":"Installing Docker","text":"<p>Docker Desktop is the primary application for managing containers on your local machine. It provides a user-friendly GUI, integrates with your system's Command-Line Interface (CLI) tools, and includes everything necessary to build and share containerized apps. </p> <p>Docker is completely free for personal use. You can begin your download by following this link to the official site. Docker has download options for Mac (Apple Silicon or Intel Chip), Windows (AMD64 or ARM64), and Linux. You may be prompted to enable WSL2 (on Windows), grant system permissions (on macOS), or install supporting packages (on Linux). The installer will walk you through these steps automatically. This installation will also require you to restart your machine to be completed, so be sure to save important work before doing this installation.</p> <p>After completing your installation, open a terminal (or command prompt for Windows) and run:</p> <pre><code>docker run hello-world\n</code></pre> <p>This will download the <code>hello-world</code> image if it's not already present before running a small container which prints a confirmation message if everything is working correctly. Running this helps to verify that your Docker Engine is running correctly and that Docker can fetch and execute containers from Docker Hub. If this works, your installation is complete and functional. If it fails to run, make sure that Docker Desktop is open and running. On some systems, you may need to enable virtualization in your BIOS or allow Docker through your firewall.</p> <p>Let's continue to the next section to learn about the basics of containers.</p>"},{"location":"02_containers/","title":"Containers and Images","text":"<p>When working with Docker, two core concepts that you'll encounter are container images and containers. Understanding them both and the distinctions between them is key to the effective use of Docker.</p>"},{"location":"02_containers/#container-images","title":"Container Images","text":"<p>A container image can be likened to a packaged blueprint of a container, including everything that a program requires to run such as the code of the application itself, the required system libraries and dependencies, the configuration files and environment settings, etc.</p> <p>Container images are static and read-only - you can think of them as snapshots or templates. Once built, they can be stored, shared, and reused on any system that supports Docker. </p> <p>Docker images are versioned and portable, allowing you to move seamlessly between development, testing, and production environments. </p>"},{"location":"02_containers/#containers","title":"Containers","text":"<p>Docker describes containers as \"a standard unit of software\" which packages all code and its dependencies. It can also be thought of as a running instance of a container image. When Docker starts a container, it creates a writable layer \"on top\" of the read-only image, before allowing the application to run in an isolated environment with its own file system, network interfaces, and process space. Pay attention to language - the images are the blueprints and the containers are more like the running instances.</p>"},{"location":"02_containers/#containers-vs-virtual-machines","title":"Containers vs. Virtual Machines","text":"<p>While containers and virtual machines (VMs) might seem similar at a glance (both allow you to run isolated environments), the way that they achieve their isolation and their performance characteristics are significantly different. </p> <p>A virtual machine emulates an entire computer, including:</p> <ul> <li> <p>Its own guest operating system.</p> </li> <li> <p>Virtual hardware, such as CPU, memory, disk, and network interfaces.</p> </li> </ul> <p>Each VM runs on top of a hypervisor, such as VirtualBox or VMware, which sits between the physical hardware and the virtual machine.</p> <p>As mentioned before, a container shares the host's operating system kernel, simply isolating the file system, processes, and network. To summarize:</p> Feature Virtual Machine Container OS: Full OS per VM Shares host OS kernel Startup Time: Minutes Seconds Resource Usage: Heavy (GBs of disk space, RAM intensive) Light (MBs to low GBs) Isolation: Hardware-level Process-level <p>Let's continue on to the next section where we will start a container that runs an SSH service so that you can practice using SSH.</p>"},{"location":"03_docker-ssh/","title":"Installing SSH Inside a Container","text":""},{"location":"03_docker-ssh/#why-install-ssh-in-a-container","title":"Why Install SSH in a Container?","text":"<p>The main goal of installing SSH in a container here is for you to explore using SSH in conjunction with this SSH tutorial at HSF.</p> <p>In most cases, SSH is not necessary in containers. Docker is designed to run a single application per container, and you typically interact with it using <code>docker exec</code>, <code>docker attach</code> or Docker Compose. Adding SSH when you do not need it will increase the image size and can create potential security concerns depending on your use of the container. The Docker container in this exercise is custom made for this exercise which is why it has SSH in it - don't use it for the template in your Docker containers or you will unnecessarily include SSH.</p>"},{"location":"03_docker-ssh/#step-by-step-installing-ssh-in-a-container","title":"Step-by-step: Installing SSH in a Container","text":"<p>While using an Ubuntu terminal, we'll create an Ubuntu-based container, install OpenSSH Server, and configure it to accept connections. </p> <p>For more information on using SSH, visit our HSF training page, here.</p>"},{"location":"03_docker-ssh/#0-open-your-terminal","title":"0. Open your terminal","text":"<p>If you're unsure how to open your terminal, refer to the shell lesson on Software Carpentry. On Windows, the appropriate application is often called Ubuntu. You can install a Terminal application from the Microsoft App Store for free. On a Mac, the appropriate application is called Terminal. On Linux, there are several different Terminal applications, and you may need to search 'terminal application + ' to find the name."},{"location":"03_docker-ssh/#1-create-a-project-folder-optional-but-recommended","title":"1. Create a project folder (optional but recommended)","text":"<p>In the terminal, navigate to an appropriate directory that can house your project folder. For Mac and Linux users, the terminal starts in your home directory which is a reasonable place to work from. In Windows we recommend you to work in your Documents directory. This command will look like:</p> <pre><code>cd /mnt/c/Users/&lt;your username&gt;/Documents/\n</code></pre> <p>Then you can make a new folder and move into it using:</p> <pre><code>mkdir example-ssh-container\ncd example-ssh-container\n</code></pre> If you encounter an error. <p>   With the above commands, you may encounter the following error:    ```   mkdir: cannot create directory \u2018example-ssh-container\u2019: File exists   ```    This error means that you've likely ran this lesson before. If so, you may only have to run:    ```   cd example-ssh-container   ```    </p>"},{"location":"03_docker-ssh/#2-create-a-file-named-dockerfile-no-file-extension","title":"2. Create a file named <code>Dockerfile</code> (no file extension)","text":"<pre><code>touch Dockerfile\n</code></pre>"},{"location":"03_docker-ssh/#3-open-the-dockerfile-in-a-text-editor","title":"3. Open the Dockerfile in a text editor","text":"<p>You can open the Dockerfile outside of WSL by navigating to it using finder (Mac) or the file explorer (Windows). Then you can right (or command) click on the file to open it with a text editor such as TextEdit (Mac) or Notepad (Windows).</p>"},{"location":"03_docker-ssh/#4-paste-the-dockerfile-content","title":"4. Paste the Dockerfile content:","text":"<p>Please remember to read through this after pasting it and change your password.</p> <pre><code>FROM ubuntu:22.04\n\n# Install SSH Server\nRUN apt-get update &amp;&amp; apt-get install -y openssh-server\n\n# Create SSH directory and set password for root - REPLACE PART IN ANGLE BRACKETS\nRUN mkdir /var/run/sshd &amp;&amp; echo 'root:&lt;your-new-password&gt;' | chpasswd\n\n# Allow root login (not recommended for production)\nRUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\n\n# Expose port 22 and start SSH\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n</code></pre>"},{"location":"03_docker-ssh/#5-save-and-close-the-file","title":"5. Save and close the file.","text":""},{"location":"03_docker-ssh/#6-build-the-image","title":"6. Build the Image","text":"<p>In the same directory as your <code>Dockerfile</code>, run:</p> <pre><code>docker build -t example-ssh-container .\n</code></pre> <ul> <li> <p><code>-t</code> tags your image with a human-readable name.</p> </li> <li> <p><code>.</code> tells Docker to look in the current directory for the Dockerfile.</p> </li> </ul> <p>This step may take a couple of minutes for your machine to complete.</p>"},{"location":"03_docker-ssh/#7-run-a-container-from-the-image","title":"7. Run a Container from the Image","text":"<pre><code>docker run -d -p 2222:22 --name ssh-container example-ssh-container\n</code></pre> <ul> <li>This maps port <code>22</code> inside the container to port <code>2222</code> on your machine.</li> </ul> <p>You'll need to open a new terminal, on which you can now SSH in using:</p> <pre><code>ssh root@localhost -p 2222\n</code></pre> <p>This will prompt you to enter the password which was set in step 4 (<code>RUN mkdir /var/run/sshd &amp;&amp; echo 'root:&lt;your-new-password&gt;' | chpasswd</code>). </p>"},{"location":"03_docker-ssh/#next-step","title":"Next Step","text":"<p>Now, you can refer to the SSH tutorial and explore, even if you don't have an account on a cluster.</p>"},{"location":"03_docker-ssh/#continued-reading","title":"Continued Reading","text":"<p>If you want to continue to learn more about Docker after this lesson here are some additional resources:</p> <ul> <li> <p>The Carpentries Community Lessons. Use the search box at the bottom to search \"containers\" to find more relevant lessons.</p> </li> <li> <p>The HSF Training Center. Articles of interest to you may be the ones for Docker, Singularity, and Reproducible Analysis with REANA.</p> </li> <li> <p>How Containers Work! by Julia Evans. If you really want to understand how containers work, this is the best resource available.</p> </li> <li> <p>Developing inside a container for Visual Studio Code. This is a quick tutorial on using Docker with Visual Studio Code.</p> </li> </ul>"}]}